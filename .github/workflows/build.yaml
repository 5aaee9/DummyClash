name: Build result

on:
  schedule:
  - cron:  '0 8 * * *'
  push:
    branches: [master]

jobs:
  cfa:
    name: Clash for Android Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Setup Go 1.16
      uses: actions/setup-go@v2
      with:
        go-version: '1.16.x'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v2

    - name: Setup NDK
      run: yes | sdkmanager --channel=1 "ndk;23.0.7344513"

    - name: Clone CFA
      env:
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        git clone https://github.com/Kr328/ClashForAndroid.git \
          --recursive # CFA use submodule

        # Replace NDK version
        sed -i 's#23.0.7123448#23.0.7344513#g' ClashForAndroid/buildSrc/src/main/java/Build.kt

        HOME_DIR=$(pwd)
        pushd ClashForAndroid/core/src/main/golang/clash
        patch -p1 <$HOME_DIR/patchs/0001-clash-rewrite-go-mod.diff
        git clone https://github.com/Dreamacro/go-shadowsocks2.git
        patch -p0 <$HOME_DIR/patchs/0000-go-shadowsocks2-add-clash.diff
        popd

        envsubst < data/keystore.properties > ClashForAndroid/keystore.properties
        cp data/local.properties ClashForAndroid/

    - name: Build apk files
      run: |
        HOME_DIR=$(pwd)
        cd ClashForAndroid
        ./gradlew build
        cd app/build/outputs/apk/foss/release/
        tar zcvf cfa.tgz *.apk
        mv cfa.tgz $HOME_DIR

    - name: Create cfa artifact
      uses: actions/upload-artifact@v2
      with:
        name: CFA
        path: cfa.tgz

  clashX:
    name: Clash X Build
    runs-on: macOS-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Go 1.16
      uses: actions/setup-go@v2
      with:
        go-version: '1.16.x'

    - name: Clone clashX source
      run: |
        git clone https://github.com/yichengchen/clashX.git
        HOME_DIR=$(pwd)
        patch -p0 <patchs/0003-clash-x-build.diff
        bash patchs/0004-update-clashx-code-sign.bash
        cd clashX/ClashX/goClash
        git clone https://github.com/Dreamacro/clash.git
        cd clash
        patch -p1 <$HOME_DIR/patchs/0001-clash-rewrite-go-mod.diff
        git clone https://github.com/Dreamacro/go-shadowsocks2.git
        patch -p0 <$HOME_DIR/patchs/0000-go-shadowsocks2-add-clash.diff
        cd ..
        go mod tidy

    - name: Setup env
      run: |
        echo `/usr/bin/xcodebuild -version`
        openssl aes-256-cbc -k "${{ secrets.CERT_ENCRYPTION_SECRET }}" -in "data/clashX.p12.enc" -d -a -out "clashX/.github/certs/dist.p12" -md md5
        cd clashX
        gem install bundler:1.16.2
        bundle install

    - name: Build
      run: |
        cd clashX
        bash install_dependency.sh
        cd ClashX
        python3 add_build_info.py
        cd ..
        bundle exec fastlane build

    - name: Create DMG
      run: |
        npm install --global create-dmg
        create-dmg clashX/ClashX.app || true
        mv ClashX*.dmg ClashX.dmg

    - name: Create ClashX artifact
      uses: actions/upload-artifact@v2
      with:
        name: ClashX
        path: ClashX.dmg

    - name: Create ClashX version file
      run: |
        cd clashX
        git rev-parse HEAD > ../ClashXVersion

    - name: Create ClashX version artifact
      uses: actions/upload-artifact@v2
      with:
        name: ClashXVersion
        path: ClashXVersion

  clash:
    name: Build Clash
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.16.x'

    - name: Setup env
      run: |
        sudo apt-get update -y
        sudo apt-get install git make -y

    - name: Create result dir
      run: mkdir result

    - name: Clone latest clash
      run: |
        git clone https://github.com/Dreamacro/clash.git
        cd clash
        git clone https://github.com/Dreamacro/go-shadowsocks2.git

    - name: Patch files
      run: |
        patch -p0 <patchs/0001-clash-rewrite-go-mod.diff
        patch -p0 <patchs/0002-fix-cfw.diff
        cd clash
        patch -p0 <../patchs/0000-go-shadowsocks2-add-clash.diff

    - name: Build clash all platform
      run: |
        cd clash
        go mod tidy
        make all-arch
        mv bin/* ../result

    - name: Package clash files
      run: |
        UPSTREAM_CLASH_HASH=`cd clash && git rev-parse HEAD`
        UPSTREAM_GO_SS2_HASH=`cd go-shadowsocks2 && git rev-parse HEAD`

        echo "$UPSTREAM_CLASH_HASH" > result/clash.hash
        echo "UPSTREAM_GO_SS2_HASH" > result/go-ss.hash
        
        cd result
        tar zcvf clash.tgz *
        mv clash.tgz ..
        
    - name: Create cfa artifact
      uses: actions/upload-artifact@v2
      with:
        name: Clash
        path: clash.tgz

  cfw:
    name: Build Clash For Windows
    runs-on: ubuntu-latest
    needs: clash

    steps:
    - name: Setup env
      run: |
        sudo apt-get update -y
        sudo apt-get install p7zip-full -y

    - name: Fetch latest cfw version
      id: clash_for_windows
      uses: pozetroninc/github-action-get-latest-release@master
      with:
        repository: Fndroid/clash_for_windows_pkg

    - name: Download clash files
      uses: actions/download-artifact@v2
      with:
        name: Clash

    - name: Download latest cfw 
      run: |
        tar zxvf clash.tgz
        echo Downloading CFW ${{ steps.clash_for_windows.outputs.release }}
        mkdir -p cfw/Clash.for.Windows-${{ steps.clash_for_windows.outputs.release }}-win
        cd cfw/Clash.for.Windows-${{ steps.clash_for_windows.outputs.release }}-win
        wget https://github.com/Fndroid/clash_for_windows_pkg/releases/download/${{ steps.clash_for_windows.outputs.release }}/Clash.for.Windows-${{ steps.clash_for_windows.outputs.release }}-win.7z
        7z x Clash.for.Windows-${{ steps.clash_for_windows.outputs.release }}-win.7z
        rm -f Clash.for.Windows-${{ steps.clash_for_windows.outputs.release }}-win.7z
        rm -f resources/static/files/win/x64/clash-win64.exe
        cp ../../clash-windows-amd64.exe resources/static/files/win/x64/clash-win64.exe
        7z a ../../Clash.for.Windows-win.7z *

    - name: Upload Clash for Windows
      uses: actions/upload-artifact@v2
      with:
        name: CFW
        path: Clash.for.Windows-win.7z

  release:
    name: Upload release
    runs-on: ubuntu-latest
    needs: 
    - clashX
    - cfa
    - cfw
    - clash

    steps:
    - uses: actions/checkout@v2
    - name: Download ClashX result
      uses: actions/download-artifact@v2
      with:
        name: ClashX

    - name: Download ClashX version result
      uses: actions/download-artifact@v2
      with:
        name: ClashXVersion

    - name: Download CFA result
      uses: actions/download-artifact@v2
      with:
        name: CFA
    
    - name: Download CFW result
      uses: actions/download-artifact@v2
      with:
        name: CFW

    - name: Download Clash result
      uses: actions/download-artifact@v2
      with:
        name: Clash

    - name: Release files
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |  
        set -x
        ls -lah
        mkdir result
        mv cfa.tgz result
        mv clash.tgz result
        mv Clash.for.Windows-win.7z result
        mv ClashX.dmg result
        cd result
        tar zxvf cfa.tgz
        tar zxvf clash.tgz
        rm -f clash.tgz
        rm -f cfa.tgz
        mv *.hash ..
        cd ..
        hub release delete latest | true
        hub release create -m latest latest
        REPO_HASH="${{github.sha}}"
        UPSTREAM_CLASH_HASH=`cat clash.hash`
        UPSTREAM_GO_SS2_HASH=`cat go-ss.hash`
        UPSTREAM_CLASH_X_HASH=`cat ClashXVersion`
        
        for item in `ls result`; do
          # Skip 7zip file
          if [[ "$item" =~ .*\.7z || "$item" =~ .*\.dmg || "$item" =~ .*\.apk ]]; then
            hub release edit -a result/$item -m "" latest
          else
            gzip -9 result/$item
            hub release edit -a result/$item.gz -m "" latest
          fi
        done

        pushd result
        sha256sum * > sha256sum
        popd

        hub release edit -a result/sha256sum -m "" latest
        echo "Latest build ${REPO_HASH:0:6}" > github.release
        echo "" >> github.release
        echo "Upstream clash Hash: \`$UPSTREAM_CLASH_HASH\`" >> github.release
        echo "Upstream go-shadowsocks2 Hash: \`$UPSTREAM_GO_SS2_HASH\`" >> github.release
        echo "CFW version: \`${{ steps.clash_for_windows.outputs.release }}\`" >> github.release
        echo "Clash X version: \`"$UPSTREAM_CLASH_X_HASH"\`" >> github.release
        echo "" >> github.release
        echo "\`\`\`" >> github.release
        cat result/sha256sum >> github.release
        echo "\`\`\`" >> github.release
        hub release edit -F github.release latest
